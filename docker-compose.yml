# Multi-Agent Platform Docker Compose Configuration
# Enhanced with monitoring, observability, and complete service orchestration

version: '3.8'

networks:
  multiagent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  temporal_data:
  prometheus_data:
  grafana_data:

services:
  # ==============================================================================
  # INFRASTRUCTURE SERVICES
  # ==============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: multiagent-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-multiagent}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/postgres:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - multiagent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: multiagent-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - multiagent-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: multiagent-qdrant
    environment:
      QDRANT__SERVICE__API_KEY: ${QDRANT_API_KEY:-}
      QDRANT__LOG_LEVEL: INFO
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    networks:
      - multiagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.5'

  # Temporal Workflow Engine
  temporal:
    image: temporalio/auto-setup:latest
    container_name: multiagent-temporal
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PWD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    volumes:
      - temporal_data:/etc/temporal
    ports:
      - "${TEMPORAL_PORT:-7233}:7233"
      - "8233:8233"  # Web UI
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - multiagent-network
    healthcheck:
      test: ["CMD", "tctl", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # ==============================================================================
  # MONITORING & OBSERVABILITY
  # ==============================================================================

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: multiagent-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - multiagent-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: multiagent-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    networks:
      - multiagent-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: multiagent-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686"  # Web UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
      - "6831:6831/udp"  # UDP
      - "6832:6832/udp"  # UDP
    networks:
      - multiagent-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ==============================================================================
  # CORE APPLICATION SERVICES
  # ==============================================================================

  # API Gateway
  api-gateway:
    build:
      context: ./go/api-gateway
      dockerfile: Dockerfile
      args:
        - GO_VERSION=1.21
    container_name: multiagent-gateway
    environment:
      - GATEWAY_PORT=${GATEWAY_PORT:-8080}
      - GATEWAY_MODE=${ENVIRONMENT:-production}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379/${REDIS_DB:-4}
      - ORCHESTRATOR_URL=http://orchestrator:8081
      - LLM_SERVICE_URL=http://llm-service:8000
      - AGENT_CORE_URL=http://agent-core:8082
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - METRICS_ENABLED=true
      - PROMETHEUS_PORT=9090
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - CORS_ENABLED=true
      - RATE_LIMIT_ENABLED=true
      - REQUESTS_PER_MINUTE=${REQUESTS_PER_MINUTE:-60}
    ports:
      - "${GATEWAY_PORT:-8080}:8080"
      - "9091:9090"  # Metrics port
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      orchestrator:
        condition: service_started
    networks:
      - multiagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Frontend Web Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=18
    container_name: multiagent-frontend
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${FRONTEND_API_URL:-http://localhost:8080}
      - REACT_APP_WS_URL=${FRONTEND_WS_URL:-ws://localhost:8080}
      - REACT_APP_VERSION=${VERSION:-1.0.0}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - multiagent-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Orchestrator Service
  orchestrator:
    build:
      context: ./go/orchestrator
      dockerfile: Dockerfile
      args:
        - GO_VERSION=1.21
    container_name: multiagent-orchestrator
    environment:
      - PORT=${ORCHESTRATOR_PORT:-8081}
      - GRPC_PORT=${ORCHESTRATOR_GRPC_PORT:-50052}
      - POSTGRES_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-multiagent}?sslmode=disable
      - REDIS_URL=redis://redis:6379/${REDIS_DB:-0}
      - TEMPORAL_HOST=temporal:7233
      - TEMPORAL_NAMESPACE=${TEMPORAL_NAMESPACE:-multi-agent}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - AGENT_CORE_URL=http://agent-core:8082
      - LLM_SERVICE_URL=http://llm-service:8000
      - MAX_PARALLEL_AGENTS=${MAX_PARALLEL_AGENTS:-5}
      - DEFAULT_TOKEN_LIMIT=${DEFAULT_TOKEN_LIMIT:-10000}
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - PROMETHEUS_METRICS=true
    ports:
      - "${ORCHESTRATOR_PORT:-8081}:8081"
      - "${ORCHESTRATOR_GRPC_PORT:-50052}:50052"
      - "9092:9090"  # Metrics port
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      temporal:
        condition: service_healthy
    networks:
      - multiagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'

  # Agent Core Service
  agent-core:
    build:
      context: ./rust/agent-core
      dockerfile: Dockerfile
      args:
        - RUST_VERSION=1.75
    container_name: multiagent-agent-core
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
      - PORT=${AGENT_CORE_PORT:-8082}
      - GRPC_PORT=${AGENT_CORE_GRPC_PORT:-50051}
      - LLM_SERVICE_URL=http://llm-service:8000
      - REDIS_URL=redis://redis:6379/${REDIS_DB:-1}
      - QDRANT_URL=http://qdrant:6333
      - ENFORCE_TIMEOUT_SECONDS=${ENFORCE_TIMEOUT_SECONDS:-30}
      - ENFORCE_MAX_TOKENS=${ENFORCE_MAX_TOKENS:-100000}
      - ENFORCE_RATE_LIMIT_PER_KEY=${ENFORCE_RATE_LIMIT_PER_KEY:-1000}
      - WASI_MEMORY_LIMIT_MB=${WASI_MEMORY_LIMIT_MB:-256}
      - WASI_CPU_TIMEOUT_SECONDS=${WASI_CPU_TIMEOUT_SECONDS:-30}
      - MEMORY_POOL_INITIAL_SIZE_MB=${MEMORY_POOL_INITIAL_SIZE_MB:-64}
      - MEMORY_POOL_MAX_SIZE_MB=${MEMORY_POOL_MAX_SIZE_MB:-512}
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - PROMETHEUS_METRICS=true
    ports:
      - "${AGENT_CORE_PORT:-8082}:8082"
      - "${AGENT_CORE_GRPC_PORT:-50051}:50051"
      - "9093:9090"  # Metrics port
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - multiagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # LLM Service
  llm-service:
    build:
      context: ./python/llm-service
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=3.11
    container_name: multiagent-llm-service
    environment:
      - PORT=${LLM_SERVICE_PORT:-8000}
      - WORKERS=${LLM_SERVICE_WORKERS:-4}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - REDIS_URL=redis://redis:6379/${REDIS_DB:-2}
      - QDRANT_URL=http://qdrant:6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY:-}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT:-}
      - MAX_COST_PER_REQUEST=${MAX_COST_PER_REQUEST:-0.10}
      - DAILY_BUDGET_USD=${DAILY_BUDGET_USD:-100.0}
      - PROMPT_CACHE_ENABLED=${PROMPT_CACHE_ENABLED:-true}
      - PROMPT_CACHE_TTL_SECONDS=${PROMPT_CACHE_TTL_SECONDS:-3600}
      - MCP_REGISTER_TOKEN=${MCP_REGISTER_TOKEN:-}
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - PROMETHEUS_METRICS=true
    ports:
      - "${LLM_SERVICE_PORT:-8000}:8000"
      - "9094:9090"  # Metrics port
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - multiagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Security Service (Optional - for OPA and advanced auth)
  security-service:
    build:
      context: ./go/security-service
      dockerfile: Dockerfile
      args:
        - GO_VERSION=1.21
    container_name: multiagent-security
    environment:
      - PORT=8083
      - POSTGRES_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-multiagent}?sslmode=disable
      - REDIS_URL=redis://redis:6379/${REDIS_DB:-3}
      - OPA_BUNDLE_URL=${OPA_BUNDLE_URL:-file:///policies}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    volumes:
      - ./policies:/policies:ro
    ports:
      - "8083:8083"
      - "9095:9090"  # Metrics port
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - multiagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - security

  # ==============================================================================
  # UTILITY SERVICES
  # ==============================================================================

  # pgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: multiagent-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@multiagent.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json:ro
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    networks:
      - multiagent-network
    profiles:
      - admin
    restart: unless-stopped

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: multiagent-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      - redis
    networks:
      - multiagent-network
    profiles:
      - admin
    restart: unless-stopped

  # Load Balancer (for production scale-out)
  nginx:
    image: nginx:alpine
    container_name: multiagent-nginx
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api-gateway
    networks:
      - multiagent-network
    profiles:
      - production
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - temporal
    networks:
      - multiagent-network
    restart: unless-stopped

  agent-core:
    build:
      context: ./rust/agent-core
      dockerfile: Dockerfile
    container_name: multiagent-agent-core
    environment:
      - RUST_LOG=info
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8082
      - POSTGRES_URL=postgres://postgres:password@postgres:5432/multiagent
      - REDIS_URL=redis://redis:6379/1
    ports:
      - "8082:8082"
    depends_on:
      - postgres
      - redis
    networks:
      - multiagent-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  llm-service:
    build:
      context: ./python/llm-service
      dockerfile: Dockerfile
    container_name: multiagent-llm-service
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - ENVIRONMENT=production
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/multiagent
      - REDIS_URL=redis://redis:6379/2
      - QDRANT_URL=http://qdrant:6333
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - LOG_LEVEL=INFO
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - COHERE_API_KEY=${COHERE_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - qdrant
    networks:
      - multiagent-network
    restart: unless-stopped

  # Temporal Workflow Engine
  temporal:
    image: temporalio/auto-setup:1.22.0
    container_name: multiagent-temporal
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PWD=password
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    ports:
      - "7233:7233"
    depends_on:
      - postgres
    networks:
      - multiagent-network
    volumes:
      - ./config/temporal:/etc/temporal/config/dynamicconfig

  temporal-ui:
    image: temporalio/ui:2.21.0
    container_name: multiagent-temporal-ui
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    ports:
      - "8085:8080"
    depends_on:
      - temporal
    networks:
      - multiagent-network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: multiagent-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - multiagent-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: multiagent-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - multiagent-network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: multiagent-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
    networks:
      - multiagent-network
    restart: unless-stopped

# Networks
networks:
  multiagent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
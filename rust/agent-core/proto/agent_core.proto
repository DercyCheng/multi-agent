syntax = "proto3";

package agent_core;

// Agent Core Service for executing code in secure sandboxes
service AgentCore {
  // Execute code in a secure sandbox
  rpc ExecuteCode(ExecuteCodeRequest) returns (ExecuteCodeResponse);
  
  // Get execution status
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
  
  // Get system metrics
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);
  
  // Cancel execution
  rpc CancelExecution(CancelExecutionRequest) returns (CancelExecutionResponse);
  
  // List active executions
  rpc ListExecutions(ListExecutionsRequest) returns (ListExecutionsResponse);
}

// Execute code request
message ExecuteCodeRequest {
  string user_id = 1;
  string tenant_id = 2;
  string session_id = 3;
  string code = 4;
  string language = 5; // python, javascript, wasm
  uint32 timeout_seconds = 6;
  uint32 memory_limit_mb = 7;
  uint32 cpu_limit_seconds = 8;
  map<string, string> environment = 9;
  repeated string allowed_hosts = 10;
  ExecutionOptions options = 11;
}

// Execution options
message ExecutionOptions {
  bool enable_networking = 1;
  bool enable_file_system = 2;
  bool enable_debugging = 3;
  string execution_mode = 4; // sandbox, isolated, trusted
  repeated string required_capabilities = 5;
}

// Execute code response
message ExecuteCodeResponse {
  string execution_id = 1;
  ExecutionStatus status = 2;
  string output = 3;
  string error_message = 4;
  uint64 execution_time_ms = 5;
  uint32 tokens_used = 6;
  double cost_usd = 7;
  repeated string security_violations = 8;
  ExecutionMetrics metrics = 9;
  FSMResult fsm_result = 10;
}

// Execution status enum
enum ExecutionStatus {
  EXECUTION_STATUS_UNSPECIFIED = 0;
  EXECUTION_STATUS_PENDING = 1;
  EXECUTION_STATUS_RUNNING = 2;
  EXECUTION_STATUS_SUCCESS = 3;
  EXECUTION_STATUS_TIMEOUT = 4;
  EXECUTION_STATUS_MEMORY_LIMIT = 5;
  EXECUTION_STATUS_CPU_LIMIT = 6;
  EXECUTION_STATUS_SECURITY_VIOLATION = 7;
  EXECUTION_STATUS_RUNTIME_ERROR = 8;
  EXECUTION_STATUS_COMPILATION_ERROR = 9;
  EXECUTION_STATUS_CANCELLED = 10;
}

// Execution metrics
message ExecutionMetrics {
  uint64 memory_used_bytes = 1;
  uint64 cpu_time_ns = 2;
  uint64 syscalls_count = 3;
  uint64 file_operations = 4;
  uint64 network_requests = 5;
  double peak_memory_mb = 6;
  double avg_cpu_percent = 7;
}

// FSM execution result
message FSMResult {
  string instance_id = 1;
  string final_state = 2;
  string status = 3;
  uint64 execution_time_ms = 4;
  uint64 transition_count = 5;
  repeated StateTransition transitions = 6;
}

// State transition record
message StateTransition {
  string from_state = 1;
  string to_state = 2;
  string transition_id = 3;
  int64 timestamp = 4;
  uint64 duration_ms = 5;
  bool success = 6;
  string error_message = 7;
}

// Get status request
message GetStatusRequest {
  string execution_id = 1;
}

// Get status response
message GetStatusResponse {
  string execution_id = 1;
  ExecutionStatus status = 2;
  float progress = 3;
  string current_state = 4;
  int64 started_at = 5;
  int64 estimated_completion = 6;
  ExecutionMetrics current_metrics = 7;
}

// Get metrics request
message GetMetricsRequest {
  bool include_detailed = 1;
  string time_range = 2; // 1h, 24h, 7d, 30d
  repeated string metric_names = 3;
}

// Get metrics response
message GetMetricsResponse {
  uint64 total_executions = 1;
  double success_rate = 2;
  uint64 average_duration_ms = 3;
  uint32 active_executions = 4;
  string system_health = 5;
  SystemMetrics system_metrics = 6;
  repeated MetricSeries detailed_metrics = 7;
}

// System metrics
message SystemMetrics {
  double cpu_usage_percent = 1;
  uint64 memory_usage_bytes = 2;
  uint64 memory_total_bytes = 3;
  uint32 active_sandbox_instances = 4;
  uint32 active_fsm_instances = 5;
  double disk_usage_percent = 6;
  uint32 network_connections = 7;
}

// Metric series for detailed metrics
message MetricSeries {
  string name = 1;
  string type = 2; // counter, gauge, histogram
  repeated MetricPoint points = 3;
}

// Metric point
message MetricPoint {
  int64 timestamp = 1;
  double value = 2;
  map<string, string> labels = 3;
}

// Cancel execution request
message CancelExecutionRequest {
  string execution_id = 1;
  string reason = 2;
}

// Cancel execution response
message CancelExecutionResponse {
  bool success = 1;
  string message = 2;
}

// List executions request
message ListExecutionsRequest {
  string user_id = 1;
  string tenant_id = 2;
  ExecutionStatus status_filter = 3;
  uint32 limit = 4;
  string page_token = 5;
}

// List executions response
message ListExecutionsResponse {
  repeated ExecutionInfo executions = 1;
  string next_page_token = 2;
  uint32 total_count = 3;
}

// Execution info
message ExecutionInfo {
  string execution_id = 1;
  string user_id = 2;
  string tenant_id = 3;
  string session_id = 4;
  string language = 5;
  ExecutionStatus status = 6;
  int64 created_at = 7;
  int64 completed_at = 8;
  uint64 duration_ms = 9;
  uint32 tokens_used = 10;
  double cost_usd = 11;
}
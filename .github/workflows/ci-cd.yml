name: Multi-Agent Platform CI/CD

on:
  push:
    branches: [master, main, develop]
    tags: ["v*"]
  pull_request:
    branches: [master, main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: "Skip tests"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Security scanning and linting
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: go, javascript, python, rust

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Lint all services
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [go-services, rust-services, python-services, frontend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go (for Go services)
        if: matrix.service == 'go-services'
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Lint Go services
        if: matrix.service == 'go-services'
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          cd go/orchestrator && golangci-lint run
          cd ../api-gateway && golangci-lint run

      - name: Setup Rust (for Rust services)
        if: matrix.service == 'rust-services'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Lint Rust services
        if: matrix.service == 'rust-services'
        run: |
          cd rust/agent-core
          cargo fmt -- --check
          cargo clippy -- -D warnings

      - name: Setup Python (for Python services)
        if: matrix.service == 'python-services'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Lint Python services
        if: matrix.service == 'python-services'
        run: |
          pip install flake8 black isort mypy
          cd python/llm-service
          black --check .
          isort --check-only .
          flake8 .
          mypy . || true

      - name: Setup Node.js (for Frontend)
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Lint Frontend
        if: matrix.service == 'frontend'
        run: |
          cd frontend
          npm ci
          npm run lint

  # Unit tests for all services
  test:
    runs-on: ubuntu-latest
    needs: [lint]
    if: ${{ !inputs.skip_tests }}
    strategy:
      matrix:
        service: [orchestrator, api-gateway, agent-core, llm-service, frontend]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go (for Go services)
        if: contains(fromJson('["orchestrator", "api-gateway"]'), matrix.service)
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Test Go services
        if: contains(fromJson('["orchestrator", "api-gateway"]'), matrix.service)
        run: |
          cd go/${{ matrix.service }}
          go mod download
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Setup Rust (for Rust services)
        if: matrix.service == 'agent-core'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Test Rust services
        if: matrix.service == 'agent-core'
        run: |
          cd rust/agent-core
          cargo test --verbose

      - name: Setup Python (for Python services)
        if: matrix.service == 'llm-service'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Test Python services
        if: matrix.service == 'llm-service'
        run: |
          cd python/llm-service
          pip install -r requirements.txt
          pytest -v --cov=src --cov-report=html

      - name: Setup Node.js (for Frontend)
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Test Frontend
        if: matrix.service == 'frontend'
        run: |
          cd frontend
          npm ci
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          fail_ci_if_error: false

  # Build Docker images
  build:
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    strategy:
      matrix:
        service: [frontend, orchestrator, api-gateway, agent-core, llm-service]
    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/${{ matrix.service == 'agent-core' && 'rust' || matrix.service == 'llm-service' && 'python' || matrix.service == 'frontend' && 'frontend' || 'go-service' }}.dockerfile
          build-args: |
            ${{ contains(fromJson('["orchestrator", "api-gateway"]'), matrix.service) && format('SERVICE_PATH=go/{0}', matrix.service) || '' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Integration tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ !inputs.skip_tests }}
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: multiagent_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run integration tests
        run: |
          chmod +x scripts/test.sh
          export POSTGRES_HOST=localhost
          export REDIS_HOST=localhost
          ./scripts/test.sh integration

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-report-*.txt

  # End-to-end tests
  e2e-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ !inputs.skip_tests && github.event_name == 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 60

      - name: Install Playwright
        run: |
          cd frontend
          npm ci
          npx playwright install --with-deps

      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: frontend/test-results/

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: "3.12.0"

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          helm upgrade --install multi-agent-staging deploy/helm/llm-service \
            --namespace multi-agent-staging \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set environment=staging \
            --values deploy/helm/llm-service/values-staging.yaml

      - name: Run smoke tests
        run: |
          # Wait for deployment
          kubectl wait --for=condition=available --timeout=300s deployment/multi-agent-staging -n multi-agent-staging

          # Run smoke tests
          curl -f https://staging.multi-agent.example.com/health

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, integration-test, e2e-test]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: "3.12.0"

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          helm upgrade --install multi-agent-prod deploy/helm/llm-service \
            --namespace multi-agent-prod \
            --create-namespace \
            --set image.tag=${{ github.ref_name }} \
            --set environment=production \
            --values deploy/helm/llm-service/values-production.yaml

      - name: Run production smoke tests
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/multi-agent-prod -n multi-agent-prod
          curl -f https://api.multi-agent.example.com/health

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Performance testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          k6 run --out json=performance-results.json tests/performance/load-test.js
        env:
          TARGET_URL: https://staging.multi-agent.example.com

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push LLM Service image
        uses: docker/build-push-action@v5
        with:
          context: ./python/llm-service
          file: ./python/llm-service/Dockerfile
          push: ${{ secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD }}
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/multi-agent/llm-service:${{ github.sha }}
            ${{ secrets.DOCKER_REGISTRY }}/multi-agent/llm-service:latest

      - name: Build and push other services (optional)
        run: echo "Add additional image build steps here for Go/rust services"

  deploy-helm:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && secrets.KUBE_CONFIG
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubeconfig
        run: |
          echo "$KUBE_CONFIG" > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy Helm chart
        run: |
          helm upgrade --install llm-service deploy/helm/llm-service -f deploy/helm/llm-service/values.yaml --set image.tag=${{ github.sha }}
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

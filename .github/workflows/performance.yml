name: Performance Testing

on:
  schedule:
    - cron: "0 4 * * 1" # Weekly on Monday at 4 AM
  workflow_dispatch:
    inputs:
      target_url:
        description: "Target URL for testing"
        required: true
        default: "https://staging.multi-agent.example.com"
        type: string
      duration:
        description: "Test duration"
        required: true
        default: "5m"
        type: string
      virtual_users:
        description: "Number of virtual users"
        required: true
        default: "50"
        type: string

jobs:
  load-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Create load test script
        run: |
          cat << 'EOF' > load-test.js
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          import { Rate } from 'k6/metrics';

          export let errorRate = new Rate('errors');

          export let options = {
            stages: [
              { duration: '2m', target: ${{ inputs.virtual_users || 50 }} }, // Ramp-up
              { duration: '${{ inputs.duration || "5m" }}', target: ${{ inputs.virtual_users || 50 }} }, // Stay at target
              { duration: '2m', target: 0 }, // Ramp-down
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'], // 95% of requests must complete below 500ms
              errors: ['rate<0.05'], // Error rate must be below 5%
            },
          };

          const BASE_URL = __ENV.TARGET_URL || '${{ inputs.target_url || "https://staging.multi-agent.example.com" }}';

          export default function () {
            // Test health endpoint
            let healthResponse = http.get(`${BASE_URL}/health`);
            check(healthResponse, {
              'health status is 200': (r) => r.status === 200,
            }) || errorRate.add(1);

            // Test API endpoints
            let apiResponse = http.get(`${BASE_URL}/api/v1/models`);
            check(apiResponse, {
              'API status is 200': (r) => r.status === 200,
              'API response time < 500ms': (r) => r.timings.duration < 500,
            }) || errorRate.add(1);

            // Test workflow creation
            let workflowPayload = JSON.stringify({
              name: 'load-test-workflow',
              steps: [
                {
                  id: 'step1',
                  type: 'agent',
                  agentId: 'test-agent',
                  configuration: { prompt: 'Hello from load test' }
                }
              ]
            });

            let workflowResponse = http.post(`${BASE_URL}/api/v1/workflows`, workflowPayload, {
              headers: { 'Content-Type': 'application/json' },
            });
            check(workflowResponse, {
              'workflow creation status is 200 or 201': (r) => r.status === 200 || r.status === 201,
            }) || errorRate.add(1);

            sleep(1);
          }
          EOF

      - name: Run load test
        run: |
          k6 run --out json=load-test-results.json load-test.js
        env:
          TARGET_URL: ${{ inputs.target_url || 'https://staging.multi-agent.example.com' }}

      - name: Process results
        run: |
          # Generate HTML report
          cat << 'EOF' > generate-report.js
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('load-test-results.json', 'utf8'));

          let metrics = {};
          results.forEach(line => {
            if (line.type === 'Point' && line.metric) {
              if (!metrics[line.metric]) {
                metrics[line.metric] = [];
              }
              metrics[line.metric].push(line.data.value);
            }
          });

          // Calculate statistics
          Object.keys(metrics).forEach(metric => {
            const values = metrics[metric].sort((a, b) => a - b);
            const avg = values.reduce((a, b) => a + b, 0) / values.length;
            const p95 = values[Math.floor(values.length * 0.95)];
            const p99 = values[Math.floor(values.length * 0.99)];
            
            console.log(`${metric}: avg=${avg.toFixed(2)}, p95=${p95}, p99=${p99}`);
          });
          EOF

          node generate-report.js > performance-summary.txt

      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: |
            load-test-results.json
            performance-summary.txt

      - name: Comment results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('performance-summary.txt', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Performance Test Results\n\n\`\`\`\n${summary}\n\`\`\``
            });

  stress-test:
    runs-on: ubuntu-latest
    needs: load-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup K6
        run: |
          sudo apt-get update
          sudo apt-get install k6

      - name: Create stress test script
        run: |
          cat << 'EOF' > stress-test.js
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export let options = {
            stages: [
              { duration: '1m', target: 100 }, // Ramp-up to 100 users
              { duration: '2m', target: 200 }, // Ramp-up to 200 users
              { duration: '2m', target: 300 }, // Ramp-up to 300 users
              { duration: '1m', target: 0 },   // Ramp-down
            ],
          };

          const BASE_URL = __ENV.TARGET_URL || '${{ inputs.target_url || "https://staging.multi-agent.example.com" }}';

          export default function () {
            let response = http.get(`${BASE_URL}/health`);
            check(response, {
              'status is 200': (r) => r.status === 200,
            });
            sleep(0.5);
          }
          EOF

      - name: Run stress test
        run: |
          k6 run --out json=stress-test-results.json stress-test.js
        env:
          TARGET_URL: ${{ inputs.target_url || 'https://staging.multi-agent.example.com' }}

      - name: Upload stress test results
        uses: actions/upload-artifact@v3
        with:
          name: stress-test-results
          path: stress-test-results.json

apiVersion: v1
kind: Namespace
metadata:
  name: multi-agent
  labels:
    name: multi-agent
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: multi-agent-config
  namespace: multi-agent
data:
  database.url: "postgres://postgres:password@postgres:5432/multiagent"
  redis.url: "redis://redis:6379"
  environment: "production"
---
apiVersion: v1
kind: Secret
metadata:
  name: multi-agent-secrets
  namespace: multi-agent
type: Opaque
data:
  db-password: cGFzc3dvcmQ= # base64 encoded "password"
  jwt-secret: bXVsdGktYWdlbnQtand0LXNlY3JldA== # base64 encoded secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: config-service
  namespace: multi-agent
  labels:
    app: config-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: config-service
  template:
    metadata:
      labels:
        app: config-service
    spec:
      containers:
        - name: config-service
          image: multi-agent/config-service:latest
          ports:
            - containerPort: 8080
          env:
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: multi-agent-config
                  key: database.url
            - name: REDIS_URL
              valueFrom:
                configMapKeyRef:
                  name: multi-agent-config
                  key: redis.url
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: multi-agent-secrets
                  key: jwt-secret
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: multi-agent-config
                  key: environment
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: config-service
  namespace: multi-agent
spec:
  selector:
    app: config-service
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-registry
  namespace: multi-agent
  labels:
    app: service-registry
spec:
  replicas: 2
  selector:
    matchLabels:
      app: service-registry
  template:
    metadata:
      labels:
        app: service-registry
    spec:
      containers:
        - name: service-registry
          image: multi-agent/service-registry:latest
          ports:
            - containerPort: 8081
          env:
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: multi-agent-config
                  key: database.url
            - name: REDIS_URL
              valueFrom:
                configMapKeyRef:
                  name: multi-agent-config
                  key: redis.url
          livenessProbe:
            httpGet:
              path: /health
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: service-registry
  namespace: multi-agent
spec:
  selector:
    app: service-registry
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8081
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: multi-agent
  labels:
    app: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: multi-agent/frontend:latest
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: multi-agent
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: multi-agent
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:14
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: multiagent
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: multi-agent-secrets
                  key: db-password
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: multi-agent
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: multi-agent
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: multi-agent
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: multi-agent-ingress
  namespace: multi-agent
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - multi-agent.example.com
      secretName: multi-agent-tls
  rules:
    - host: multi-agent.example.com
      http:
        paths:
          - path: /api/config
            pathType: Prefix
            backend:
              service:
                name: config-service
                port:
                  number: 80
          - path: /api/registry
            pathType: Prefix
            backend:
              service:
                name: service-registry
                port:
                  number: 80
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: config-service-hpa
  namespace: multi-agent
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: config-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: config-service-pdb
  namespace: multi-agent
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: config-service
---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: multi-agent-metrics
  namespace: multi-agent
  labels:
    app: multi-agent
spec:
  selector:
    matchLabels:
      app: config-service
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
